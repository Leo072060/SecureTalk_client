// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_5fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_5fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_5fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_5fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fheader_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_msg_5fheader_2eproto_metadata_getter(int index);
namespace msg_header {
class ClientMsgHeader;
struct ClientMsgHeaderDefaultTypeInternal;
extern ClientMsgHeaderDefaultTypeInternal _ClientMsgHeader_default_instance_;
class IPAddress;
struct IPAddressDefaultTypeInternal;
extern IPAddressDefaultTypeInternal _IPAddress_default_instance_;
class ServerMsgHeader;
struct ServerMsgHeaderDefaultTypeInternal;
extern ServerMsgHeaderDefaultTypeInternal _ServerMsgHeader_default_instance_;
}  // namespace msg_header
PROTOBUF_NAMESPACE_OPEN
template<> ::msg_header::ClientMsgHeader* Arena::CreateMaybeMessage<::msg_header::ClientMsgHeader>(Arena*);
template<> ::msg_header::IPAddress* Arena::CreateMaybeMessage<::msg_header::IPAddress>(Arena*);
template<> ::msg_header::ServerMsgHeader* Arena::CreateMaybeMessage<::msg_header::ServerMsgHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace msg_header {

enum ClientMsgHeader_Platform : int {
  ClientMsgHeader_Platform_UNKNOWN = 0,
  ClientMsgHeader_Platform_WINDOWS = 1,
  ClientMsgHeader_Platform_LINUX = 2,
  ClientMsgHeader_Platform_MAC = 3,
  ClientMsgHeader_Platform_ANDROID = 4,
  ClientMsgHeader_Platform_IOS = 5,
  ClientMsgHeader_Platform_ClientMsgHeader_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMsgHeader_Platform_ClientMsgHeader_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMsgHeader_Platform_IsValid(int value);
constexpr ClientMsgHeader_Platform ClientMsgHeader_Platform_Platform_MIN = ClientMsgHeader_Platform_UNKNOWN;
constexpr ClientMsgHeader_Platform ClientMsgHeader_Platform_Platform_MAX = ClientMsgHeader_Platform_IOS;
constexpr int ClientMsgHeader_Platform_Platform_ARRAYSIZE = ClientMsgHeader_Platform_Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMsgHeader_Platform_descriptor();
template<typename T>
inline const std::string& ClientMsgHeader_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMsgHeader_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMsgHeader_Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMsgHeader_Platform_descriptor(), enum_t_value);
}
inline bool ClientMsgHeader_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientMsgHeader_Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMsgHeader_Platform>(
    ClientMsgHeader_Platform_descriptor(), name, value);
}
// ===================================================================

class IPAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg_header.IPAddress) */ {
 public:
  inline IPAddress() : IPAddress(nullptr) {}
  virtual ~IPAddress();
  explicit constexpr IPAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IPAddress(const IPAddress& from);
  IPAddress(IPAddress&& from) noexcept
    : IPAddress() {
    *this = ::std::move(from);
  }

  inline IPAddress& operator=(const IPAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPAddress& operator=(IPAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const IPAddress* internal_default_instance() {
    return reinterpret_cast<const IPAddress*>(
               &_IPAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IPAddress& a, IPAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(IPAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPAddress* New() const final {
    return CreateMaybeMessage<IPAddress>(nullptr);
  }

  IPAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPAddress& from);
  void MergeFrom(const IPAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg_header.IPAddress";
  }
  protected:
  explicit IPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_msg_5fheader_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:msg_header.IPAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fheader_2eproto;
};
// -------------------------------------------------------------------

class ClientMsgHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg_header.ClientMsgHeader) */ {
 public:
  inline ClientMsgHeader() : ClientMsgHeader(nullptr) {}
  virtual ~ClientMsgHeader();
  explicit constexpr ClientMsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMsgHeader(const ClientMsgHeader& from);
  ClientMsgHeader(ClientMsgHeader&& from) noexcept
    : ClientMsgHeader() {
    *this = ::std::move(from);
  }

  inline ClientMsgHeader& operator=(const ClientMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMsgHeader& operator=(ClientMsgHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMsgHeader* internal_default_instance() {
    return reinterpret_cast<const ClientMsgHeader*>(
               &_ClientMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientMsgHeader& a, ClientMsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMsgHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMsgHeader* New() const final {
    return CreateMaybeMessage<ClientMsgHeader>(nullptr);
  }

  ClientMsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMsgHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMsgHeader& from);
  void MergeFrom(const ClientMsgHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMsgHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg_header.ClientMsgHeader";
  }
  protected:
  explicit ClientMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_msg_5fheader_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ClientMsgHeader_Platform Platform;
  static constexpr Platform UNKNOWN =
    ClientMsgHeader_Platform_UNKNOWN;
  static constexpr Platform WINDOWS =
    ClientMsgHeader_Platform_WINDOWS;
  static constexpr Platform LINUX =
    ClientMsgHeader_Platform_LINUX;
  static constexpr Platform MAC =
    ClientMsgHeader_Platform_MAC;
  static constexpr Platform ANDROID =
    ClientMsgHeader_Platform_ANDROID;
  static constexpr Platform IOS =
    ClientMsgHeader_Platform_IOS;
  static inline bool Platform_IsValid(int value) {
    return ClientMsgHeader_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    ClientMsgHeader_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    ClientMsgHeader_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    ClientMsgHeader_Platform_Platform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Platform_descriptor() {
    return ClientMsgHeader_Platform_descriptor();
  }
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return ClientMsgHeader_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return ClientMsgHeader_Platform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 3,
    kIpAddressFieldNumber = 6,
    kUserIdFieldNumber = 2,
    kPlatformFieldNumber = 5,
    kTimestampFieldNumber = 4,
  };
  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .msg_header.IPAddress ip_address = 6;
  bool has_ip_address() const;
  private:
  bool _internal_has_ip_address() const;
  public:
  void clear_ip_address();
  const ::msg_header::IPAddress& ip_address() const;
  ::msg_header::IPAddress* release_ip_address();
  ::msg_header::IPAddress* mutable_ip_address();
  void set_allocated_ip_address(::msg_header::IPAddress* ip_address);
  private:
  const ::msg_header::IPAddress& _internal_ip_address() const;
  ::msg_header::IPAddress* _internal_mutable_ip_address();
  public:
  void unsafe_arena_set_allocated_ip_address(
      ::msg_header::IPAddress* ip_address);
  ::msg_header::IPAddress* unsafe_arena_release_ip_address();

  // int32 user_id = 2;
  void clear_user_id();
  ::PROTOBUF_NAMESPACE_ID::int32 user_id() const;
  void set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_user_id() const;
  void _internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  void clear_platform();
  ::msg_header::ClientMsgHeader_Platform platform() const;
  void set_platform(::msg_header::ClientMsgHeader_Platform value);
  private:
  ::msg_header::ClientMsgHeader_Platform _internal_platform() const;
  void _internal_set_platform(::msg_header::ClientMsgHeader_Platform value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg_header.ClientMsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::msg_header::IPAddress* ip_address_;
  ::PROTOBUF_NAMESPACE_ID::int32 user_id_;
  int platform_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fheader_2eproto;
};
// -------------------------------------------------------------------

class ServerMsgHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:msg_header.ServerMsgHeader) */ {
 public:
  inline ServerMsgHeader() : ServerMsgHeader(nullptr) {}
  virtual ~ServerMsgHeader();
  explicit constexpr ServerMsgHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerMsgHeader(const ServerMsgHeader& from);
  ServerMsgHeader(ServerMsgHeader&& from) noexcept
    : ServerMsgHeader() {
    *this = ::std::move(from);
  }

  inline ServerMsgHeader& operator=(const ServerMsgHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMsgHeader& operator=(ServerMsgHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMsgHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerMsgHeader* internal_default_instance() {
    return reinterpret_cast<const ServerMsgHeader*>(
               &_ServerMsgHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerMsgHeader& a, ServerMsgHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMsgHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMsgHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMsgHeader* New() const final {
    return CreateMaybeMessage<ServerMsgHeader>(nullptr);
  }

  ServerMsgHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMsgHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMsgHeader& from);
  void MergeFrom(const ServerMsgHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMsgHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "msg_header.ServerMsgHeader";
  }
  protected:
  explicit ServerMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_msg_5fheader_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 4,
  };
  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:msg_header.ServerMsgHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_5fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IPAddress

// string ip = 1;
inline void IPAddress::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& IPAddress::ip() const {
  // @@protoc_insertion_point(field_get:msg_header.IPAddress.ip)
  return _internal_ip();
}
inline void IPAddress::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:msg_header.IPAddress.ip)
}
inline std::string* IPAddress::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:msg_header.IPAddress.ip)
  return _internal_mutable_ip();
}
inline const std::string& IPAddress::_internal_ip() const {
  return ip_.Get();
}
inline void IPAddress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void IPAddress::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg_header.IPAddress.ip)
}
inline void IPAddress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg_header.IPAddress.ip)
}
inline void IPAddress::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg_header.IPAddress.ip)
}
inline std::string* IPAddress::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* IPAddress::release_ip() {
  // @@protoc_insertion_point(field_release:msg_header.IPAddress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPAddress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg_header.IPAddress.ip)
}

// int32 port = 2;
inline void IPAddress::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPAddress::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IPAddress::port() const {
  // @@protoc_insertion_point(field_get:msg_header.IPAddress.port)
  return _internal_port();
}
inline void IPAddress::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void IPAddress::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:msg_header.IPAddress.port)
}

// -------------------------------------------------------------------

// ClientMsgHeader

// int32 user_id = 2;
inline void ClientMsgHeader::clear_user_id() {
  user_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsgHeader::_internal_user_id() const {
  return user_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientMsgHeader::user_id() const {
  // @@protoc_insertion_point(field_get:msg_header.ClientMsgHeader.user_id)
  return _internal_user_id();
}
inline void ClientMsgHeader::_internal_set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  user_id_ = value;
}
inline void ClientMsgHeader::set_user_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:msg_header.ClientMsgHeader.user_id)
}

// string session_id = 3;
inline void ClientMsgHeader::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& ClientMsgHeader::session_id() const {
  // @@protoc_insertion_point(field_get:msg_header.ClientMsgHeader.session_id)
  return _internal_session_id();
}
inline void ClientMsgHeader::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:msg_header.ClientMsgHeader.session_id)
}
inline std::string* ClientMsgHeader::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:msg_header.ClientMsgHeader.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ClientMsgHeader::_internal_session_id() const {
  return session_id_.Get();
}
inline void ClientMsgHeader::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClientMsgHeader::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:msg_header.ClientMsgHeader.session_id)
}
inline void ClientMsgHeader::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:msg_header.ClientMsgHeader.session_id)
}
inline void ClientMsgHeader::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:msg_header.ClientMsgHeader.session_id)
}
inline std::string* ClientMsgHeader::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClientMsgHeader::release_session_id() {
  // @@protoc_insertion_point(field_release:msg_header.ClientMsgHeader.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClientMsgHeader::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:msg_header.ClientMsgHeader.session_id)
}

// int64 timestamp = 4;
inline void ClientMsgHeader::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMsgHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClientMsgHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:msg_header.ClientMsgHeader.timestamp)
  return _internal_timestamp();
}
inline void ClientMsgHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ClientMsgHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg_header.ClientMsgHeader.timestamp)
}

// .msg_header.ClientMsgHeader.Platform platform = 5;
inline void ClientMsgHeader::clear_platform() {
  platform_ = 0;
}
inline ::msg_header::ClientMsgHeader_Platform ClientMsgHeader::_internal_platform() const {
  return static_cast< ::msg_header::ClientMsgHeader_Platform >(platform_);
}
inline ::msg_header::ClientMsgHeader_Platform ClientMsgHeader::platform() const {
  // @@protoc_insertion_point(field_get:msg_header.ClientMsgHeader.platform)
  return _internal_platform();
}
inline void ClientMsgHeader::_internal_set_platform(::msg_header::ClientMsgHeader_Platform value) {
  
  platform_ = value;
}
inline void ClientMsgHeader::set_platform(::msg_header::ClientMsgHeader_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:msg_header.ClientMsgHeader.platform)
}

// .msg_header.IPAddress ip_address = 6;
inline bool ClientMsgHeader::_internal_has_ip_address() const {
  return this != internal_default_instance() && ip_address_ != nullptr;
}
inline bool ClientMsgHeader::has_ip_address() const {
  return _internal_has_ip_address();
}
inline void ClientMsgHeader::clear_ip_address() {
  if (GetArena() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
}
inline const ::msg_header::IPAddress& ClientMsgHeader::_internal_ip_address() const {
  const ::msg_header::IPAddress* p = ip_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::msg_header::IPAddress&>(
      ::msg_header::_IPAddress_default_instance_);
}
inline const ::msg_header::IPAddress& ClientMsgHeader::ip_address() const {
  // @@protoc_insertion_point(field_get:msg_header.ClientMsgHeader.ip_address)
  return _internal_ip_address();
}
inline void ClientMsgHeader::unsafe_arena_set_allocated_ip_address(
    ::msg_header::IPAddress* ip_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_address_);
  }
  ip_address_ = ip_address;
  if (ip_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:msg_header.ClientMsgHeader.ip_address)
}
inline ::msg_header::IPAddress* ClientMsgHeader::release_ip_address() {
  
  ::msg_header::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::msg_header::IPAddress* ClientMsgHeader::unsafe_arena_release_ip_address() {
  // @@protoc_insertion_point(field_release:msg_header.ClientMsgHeader.ip_address)
  
  ::msg_header::IPAddress* temp = ip_address_;
  ip_address_ = nullptr;
  return temp;
}
inline ::msg_header::IPAddress* ClientMsgHeader::_internal_mutable_ip_address() {
  
  if (ip_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::msg_header::IPAddress>(GetArena());
    ip_address_ = p;
  }
  return ip_address_;
}
inline ::msg_header::IPAddress* ClientMsgHeader::mutable_ip_address() {
  // @@protoc_insertion_point(field_mutable:msg_header.ClientMsgHeader.ip_address)
  return _internal_mutable_ip_address();
}
inline void ClientMsgHeader::set_allocated_ip_address(::msg_header::IPAddress* ip_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ip_address_;
  }
  if (ip_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip_address);
    if (message_arena != submessage_arena) {
      ip_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_address, submessage_arena);
    }
    
  } else {
    
  }
  ip_address_ = ip_address;
  // @@protoc_insertion_point(field_set_allocated:msg_header.ClientMsgHeader.ip_address)
}

// -------------------------------------------------------------------

// ServerMsgHeader

// int64 timestamp = 4;
inline void ServerMsgHeader::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerMsgHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ServerMsgHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:msg_header.ServerMsgHeader.timestamp)
  return _internal_timestamp();
}
inline void ServerMsgHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ServerMsgHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:msg_header.ServerMsgHeader.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace msg_header

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::msg_header::ClientMsgHeader_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_header::ClientMsgHeader_Platform>() {
  return ::msg_header::ClientMsgHeader_Platform_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_5fheader_2eproto
