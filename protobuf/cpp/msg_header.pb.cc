// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_header.proto

#include "msg_header.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace msg_header {
constexpr IPAddress::IPAddress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct IPAddressDefaultTypeInternal {
  constexpr IPAddressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IPAddressDefaultTypeInternal() {}
  union {
    IPAddress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IPAddressDefaultTypeInternal _IPAddress_default_instance_;
constexpr ClientMsgHeader::ClientMsgHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_address_(nullptr)
  , user_id_(0)
  , platform_(0)

  , timestamp_(PROTOBUF_LONGLONG(0)){}
struct ClientMsgHeaderDefaultTypeInternal {
  constexpr ClientMsgHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientMsgHeaderDefaultTypeInternal() {}
  union {
    ClientMsgHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientMsgHeaderDefaultTypeInternal _ClientMsgHeader_default_instance_;
constexpr ServerMsgHeader::ServerMsgHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(PROTOBUF_LONGLONG(0)){}
struct ServerMsgHeaderDefaultTypeInternal {
  constexpr ServerMsgHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServerMsgHeaderDefaultTypeInternal() {}
  union {
    ServerMsgHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServerMsgHeaderDefaultTypeInternal _ServerMsgHeader_default_instance_;
}  // namespace msg_header
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_5fheader_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_5fheader_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_5fheader_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_5fheader_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, ip_),
  PROTOBUF_FIELD_OFFSET(::msg_header::IPAddress, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, user_id_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, session_id_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, timestamp_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, platform_),
  PROTOBUF_FIELD_OFFSET(::msg_header::ClientMsgHeader, ip_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::msg_header::ServerMsgHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::msg_header::ServerMsgHeader, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::msg_header::IPAddress)},
  { 7, -1, sizeof(::msg_header::ClientMsgHeader)},
  { 17, -1, sizeof(::msg_header::ServerMsgHeader)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_IPAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_ClientMsgHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::msg_header::_ServerMsgHeader_default_instance_),
};

const char descriptor_table_protodef_msg_5fheader_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020msg_header.proto\022\nmsg_header\"%\n\tIPAddr"
  "ess\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"\374\001\n\017Client"
  "MsgHeader\022\017\n\007user_id\030\002 \001(\005\022\022\n\nsession_id"
  "\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\003\0226\n\010platform\030\005 "
  "\001(\0162$.msg_header.ClientMsgHeader.Platfor"
  "m\022)\n\nip_address\030\006 \001(\0132\025.msg_header.IPAdd"
  "ress\"N\n\010Platform\022\013\n\007UNKNOWN\020\000\022\013\n\007WINDOWS"
  "\020\001\022\t\n\005LINUX\020\002\022\007\n\003MAC\020\003\022\013\n\007ANDROID\020\004\022\007\n\003I"
  "OS\020\005\"$\n\017ServerMsgHeader\022\021\n\ttimestamp\030\004 \001"
  "(\003b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_5fheader_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_5fheader_2eproto = {
  false, false, 370, descriptor_table_protodef_msg_5fheader_2eproto, "msg_header.proto", 
  &descriptor_table_msg_5fheader_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_msg_5fheader_2eproto::offsets,
  file_level_metadata_msg_5fheader_2eproto, file_level_enum_descriptors_msg_5fheader_2eproto, file_level_service_descriptors_msg_5fheader_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_msg_5fheader_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fheader_2eproto);
  return descriptor_table_msg_5fheader_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_5fheader_2eproto(&descriptor_table_msg_5fheader_2eproto);
namespace msg_header {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMsgHeader_Platform_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_5fheader_2eproto);
  return file_level_enum_descriptors_msg_5fheader_2eproto[0];
}
bool ClientMsgHeader_Platform_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ClientMsgHeader_Platform ClientMsgHeader::UNKNOWN;
constexpr ClientMsgHeader_Platform ClientMsgHeader::WINDOWS;
constexpr ClientMsgHeader_Platform ClientMsgHeader::LINUX;
constexpr ClientMsgHeader_Platform ClientMsgHeader::MAC;
constexpr ClientMsgHeader_Platform ClientMsgHeader::ANDROID;
constexpr ClientMsgHeader_Platform ClientMsgHeader::IOS;
constexpr ClientMsgHeader_Platform ClientMsgHeader::Platform_MIN;
constexpr ClientMsgHeader_Platform ClientMsgHeader::Platform_MAX;
constexpr int ClientMsgHeader::Platform_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class IPAddress::_Internal {
 public:
};

IPAddress::IPAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_header.IPAddress)
}
IPAddress::IPAddress(const IPAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArena());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:msg_header.IPAddress)
}

void IPAddress::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

IPAddress::~IPAddress() {
  // @@protoc_insertion_point(destructor:msg_header.IPAddress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPAddress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IPAddress::ArenaDtor(void* object) {
  IPAddress* _this = reinterpret_cast< IPAddress* >(object);
  (void)_this;
}
void IPAddress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.IPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg_header.IPAddress.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.IPAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.IPAddress.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.IPAddress)
  return target;
}

size_t IPAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.IPAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const IPAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.IPAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.IPAddress)
    MergeFrom(*source);
  }
}

void IPAddress::MergeFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.IPAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void IPAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPAddress::CopyFrom(const IPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.IPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPAddress::IsInitialized() const {
  return true;
}

void IPAddress::InternalSwap(IPAddress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IPAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ClientMsgHeader::_Internal {
 public:
  static const ::msg_header::IPAddress& ip_address(const ClientMsgHeader* msg);
};

const ::msg_header::IPAddress&
ClientMsgHeader::_Internal::ip_address(const ClientMsgHeader* msg) {
  return *msg->ip_address_;
}
ClientMsgHeader::ClientMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_header.ClientMsgHeader)
}
ClientMsgHeader::ClientMsgHeader(const ClientMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_ip_address()) {
    ip_address_ = new ::msg_header::IPAddress(*from.ip_address_);
  } else {
    ip_address_ = nullptr;
  }
  ::memcpy(&user_id_, &from.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:msg_header.ClientMsgHeader)
}

void ClientMsgHeader::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_address_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&ip_address_)) + sizeof(timestamp_));
}

ClientMsgHeader::~ClientMsgHeader() {
  // @@protoc_insertion_point(destructor:msg_header.ClientMsgHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientMsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ip_address_;
}

void ClientMsgHeader::ArenaDtor(void* object) {
  ClientMsgHeader* _this = reinterpret_cast< ClientMsgHeader* >(object);
  (void)_this;
}
void ClientMsgHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.ClientMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && ip_address_ != nullptr) {
    delete ip_address_;
  }
  ip_address_ = nullptr;
  ::memset(&user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&user_id_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "msg_header.ClientMsgHeader.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .msg_header.ClientMsgHeader.Platform platform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_platform(static_cast<::msg_header::ClientMsgHeader_Platform>(val));
        } else goto handle_unusual;
        continue;
      // .msg_header.IPAddress ip_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientMsgHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.ClientMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_user_id(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "msg_header.ClientMsgHeader.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  if (this->platform() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_platform(), target);
  }

  // .msg_header.IPAddress ip_address = 6;
  if (this->has_ip_address()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ip_address(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.ClientMsgHeader)
  return target;
}

size_t ClientMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.ClientMsgHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .msg_header.IPAddress ip_address = 6;
  if (this->has_ip_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ip_address_);
  }

  // int32 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_user_id());
  }

  // .msg_header.ClientMsgHeader.Platform platform = 5;
  if (this->platform() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_platform());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.ClientMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientMsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.ClientMsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.ClientMsgHeader)
    MergeFrom(*source);
  }
}

void ClientMsgHeader::MergeFrom(const ClientMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.ClientMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_ip_address()) {
    _internal_mutable_ip_address()->::msg_header::IPAddress::MergeFrom(from._internal_ip_address());
  }
  if (from.user_id() != 0) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from.platform() != 0) {
    _internal_set_platform(from._internal_platform());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ClientMsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.ClientMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMsgHeader::CopyFrom(const ClientMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.ClientMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMsgHeader::IsInitialized() const {
  return true;
}

void ClientMsgHeader::InternalSwap(ClientMsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMsgHeader, timestamp_)
      + sizeof(ClientMsgHeader::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClientMsgHeader, ip_address_)>(
          reinterpret_cast<char*>(&ip_address_),
          reinterpret_cast<char*>(&other->ip_address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerMsgHeader::_Internal {
 public:
};

ServerMsgHeader::ServerMsgHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:msg_header.ServerMsgHeader)
}
ServerMsgHeader::ServerMsgHeader(const ServerMsgHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:msg_header.ServerMsgHeader)
}

void ServerMsgHeader::SharedCtor() {
timestamp_ = PROTOBUF_LONGLONG(0);
}

ServerMsgHeader::~ServerMsgHeader() {
  // @@protoc_insertion_point(destructor:msg_header.ServerMsgHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerMsgHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ServerMsgHeader::ArenaDtor(void* object) {
  ServerMsgHeader* _this = reinterpret_cast< ServerMsgHeader* >(object);
  (void)_this;
}
void ServerMsgHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerMsgHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerMsgHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:msg_header.ServerMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerMsgHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:msg_header.ServerMsgHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:msg_header.ServerMsgHeader)
  return target;
}

size_t ServerMsgHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:msg_header.ServerMsgHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMsgHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:msg_header.ServerMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMsgHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerMsgHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:msg_header.ServerMsgHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:msg_header.ServerMsgHeader)
    MergeFrom(*source);
  }
}

void ServerMsgHeader::MergeFrom(const ServerMsgHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:msg_header.ServerMsgHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void ServerMsgHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:msg_header.ServerMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMsgHeader::CopyFrom(const ServerMsgHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:msg_header.ServerMsgHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgHeader::IsInitialized() const {
  return true;
}

void ServerMsgHeader::InternalSwap(ServerMsgHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msg_header
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::msg_header::IPAddress* Arena::CreateMaybeMessage< ::msg_header::IPAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_header::IPAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_header::ClientMsgHeader* Arena::CreateMaybeMessage< ::msg_header::ClientMsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_header::ClientMsgHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::msg_header::ServerMsgHeader* Arena::CreateMaybeMessage< ::msg_header::ServerMsgHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::msg_header::ServerMsgHeader >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
